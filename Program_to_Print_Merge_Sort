
// Merge Sort : Time Complexity is O(nlogn) Space Complexity O(n).
public class MergeSort {

    public static void printArray(int arr[]){
        for(int i=0 ;i<arr.length; i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    public static void merge(int arr[], int si, int ei){

        if(si >= ei){
            return;
        }
        int mid = si+(ei-si)/2;
        merge(arr, si, mid);
        merge(arr, mid+1, ei);

        mergeSort(arr,si,mid,ei);
    }


    public static void mergeSort(int arr[], int si, int mid, int ei){
        int temp [] = new int[ei-si+1];
        int i = si; // left iterator
        int j = mid+1;// right iterator
        int k = 0; // temp array iterator

        while(i<=mid && j<=ei){
            if(arr[i] < arr[j]){
                temp[k]=arr[i];
                i++;
            } else{
                temp[k] = arr[j];
                j++; 
            }
            k++;
        }

        // Left 
        while(i<=mid){
            temp[k++] = arr[i++];
        }
        // right
        while(j<=ei){
            temp[k++] = arr[j++];
        }

        // Copy temp to the origianl array.
        for(k=0, i=si; k<temp.length; k++, i++){
            arr[i]=temp[k];
        }
    }

    public static void main (String args[]) {
        int arr [] ={6,3,9,5,2,8};
        System.out.print("Merge Sort : ");
        merge(arr, 0 , arr.length-1);
        printArray(arr);

    }
}
